## Initialize libraries
Libraries = c("knitr", "ggfortify")
for(p in Libraries){
library(p, character.only = TRUE)
}
opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE)
set.seed(1000)
x = seq(1, 4, 0.05)
y = 1.5*x + rnorm(61, mean = 0, sd = 0.5)
rb_palette <- colorRampPalette(c('red','blue'))
z <- rb_palette(10)[as.numeric(cut(y,breaks = 10))]
xy_pca <- prcomp(cbind(x, y),
center = T,
scale = T)
par(mfrow = c(1,2))
plot(x, y, ylim = c(-0.5,8), xlim = c(-0.5,4.5), main = "Fig. #1: Raw Data", pch = 20, col = z)
abline(0, 1.5, col = "red")
plot(xy_pca$x[, 1], xy_pca$x[, 2], main = "Fig. #2: Data Rotated: 56.3 Degrees", xlab = "PC1", ylab = "PC2", pch = 20, col = z, ylim = c(-1, 1))
abline(h = 0, col = "red")
## Import data & data handling
setwd("~/Dropbox/a1_mcc_project/00-data/aac_dpc_values")
c_m_transformed  <- read.csv("c_m_TRANSFORMED.csv")
c_m_20aa <- c_m_transformed[, -c(1:3)] # Raw data - Keeping only 20 AA columns
centered_c_m_20aa <- data.frame(apply(c_m_20aa, 2, function(x) x - mean(x))) # Scaled data
norm_c_m_20aa <- data.frame(apply(c_m_20aa, 2, function(x) ((x - mean(x)) / sd(x)))) # Normalized  data
par(mfrow = c(1,3))
hist(c_m_20aa$F, main = "Unscaled Data", ylim = c(0, 1400), breaks=10, xlim = c(-0.1, 0.8))
hist(centered_c_m_20aa$F, main = "Centered Data", ylim = c(0, 1400), breaks=10, xlim = c(-0.3, 0.5))
hist(norm_c_m_20aa$F, main = "Normalized Data", ylim = c(0, 1400), breaks=10, xlim = c(-5, 7))
start_time <- Sys.time() # Start timer
c_m_20_PCA = prcomp(norm_c_m_20aa)
end_time <- Sys.time()   # End timer
end_time - start_time    # Display time
screeplot(c_m_20_PCA,
main = "Screeplot of c_m_20_PCA \n (Red Line Indicates Kaiser Rule, Eigenvalues = 1)",
npcs = 20,
type = "lines",
ylim = c(0, 7))
abline(h = 1, col = "red")
abline(v = 5, col = "green")
plot(cumsum(c_m_20_PCA$sdev^2 / sum(c_m_20_PCA$sdev^2)),
main = "Cumulative Proportion of Variance Vs Principle Component\n(Red line indicates p = 0.9, Green line indicates PC=12)",
ylab = "% Variance(i) / Total Variance",
xlab = "Principal Component(i)",
ylim = c(0,1),
type="b")
abline(h = 0.9, col = "red")
abline(v = 12, col = "green")
autoplot(c_m_20_PCA,
data = c_m_transformed,
label.show.legend = F,
colour = 'Class',
shape = FALSE,
label = TRUE,
label.size = 4,
loadings = TRUE, loadings.label = TRUE, loadings.label.size = 7,
loadings.label.hjust = 2)
## Print Biplot1.annotated.png
## Biplot 1 for Conclusion discussion
png(filename = "Biplot1.annotated.png",
width = 6,
height = 6,
units = 'in',
res = 300)
autoplot(c_m_20_PCA,
data = c_m_transformed,
label.show.legend = F,
colour = 'Class',
shape = FALSE,
label = TRUE,
label.size = 4,
loadings = TRUE, loadings.label = TRUE, loadings.label.size = 7,
loadings.label.hjust = 2)
dev.off()
biplot(c_m_20_PCA,
cex = 0.75,
col = c("#bbbbbb", "#ff0000"),
cols <- c(1,2))
abline(v = 4.5, col = "blue", lw = 1)
abline(v = -15, col = "blue", lw = 1)
abline(h = 25, col = "blue", lw = 1)
abline(h = -24.5, col = "blue", lw = 1)
## Print 'Biplot.2pc1.pc2.png'
## Biplot 2 for Conclusion discussion
png(filename = "Biplot.2pc1.pc2.png",
width = 6,
height = 6,
units = 'in',
res = 300)
biplot(c_m_20_PCA,
cex = 0.75,
col = c("#bbbbbb", "#ff0000"),
cols <- c(1, 2))
abline(v = 4.5, col = "blue", lw = 1)
abline(v = -15, col = "blue", lw = 1)
abline(h = 25, col = "blue", lw = 1)
abline(h = -24.5, col = "blue", lw = 1)
dev.off()
outliers_PC1 <- which((c_m_20_PCA$x[, 1] > 5) | (c_m_20_PCA$x[, 1] < -5))
length(outliers_PC1)
outliers_PC2 <- which((c_m_20_PCA$x[, 2] > 3.5) | (c_m_20_PCA$x[, 2] < -3.5))
length(outliers_PC2)
total_pca_1_2_outliers <- union(outliers_PC1, outliers_PC2)
total_pca_1_2_outliers <- sort(total_pca_1_2_outliers)
remove <- c(182, 223, 236, 705)
mgb_pca_outliers <- setdiff(total_pca_1_2_outliers, remove)
length(mgb_pca_outliers)
mgb_pca_outliers
knitr::include_graphics("./Biplot1.best.annotated.png")
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2])
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2],
cex = 0.75,
col = c("#bbbbbb", "#ff0000"),
cols <- c(1,2))
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2],
cex = 0.75)
# col = c("#bbbbbb", "#ff0000"),
# cols <- c(1,2))
abline(v = 4.5, col = "blue", lw = 1)
abline(v = -15, col = "blue", lw = 1)
abline(h = 25, col = "blue", lw = 1)
abline(h = -24.5, col = "blue", lw = 1)
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2],
cex = 0.75)
# col = c("#bbbbbb", "#ff0000"),
# cols <- c(1,2))
abline(v = 2, col = "blue", lw = 1)
abline(v = -3, col = "blue", lw = 1)
abline(h = -2, col = "blue", lw = 1)
abline(h = 3.9, col = "blue", lw = 1)
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2],
cex = 0.75)
# col = c("#bbbbbb", "#ff0000"),
# cols <- c(1,2))
abline(v = 1.7, col = "blue", lw = 1)
abline(v = -3, col = "blue", lw = 1)
abline(h = -2, col = "blue", lw = 1)
abline(h = 3.9, col = "blue", lw = 1)
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2],
cex = 0.75)
# col = c("#bbbbbb", "#ff0000"),
# cols <- c(1,2))
abline(v = 1.6, col = "blue", lw = 1)
abline(v = -3, col = "blue", lw = 1)
abline(h = -2, col = "blue", lw = 1)
abline(h = 3.9, col = "blue", lw = 1)
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2],
cex = 0.75)
# col = c("#bbbbbb", "#ff0000"),
# cols <- c(1,2))
abline(v = 1.5, col = "blue", lw = 1)
abline(v = -3, col = "blue", lw = 1)
abline(h = -2, col = "blue", lw = 1)
abline(h = 3.9, col = "blue", lw = 1)
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2],
cex = 0.75)
# col = c("#bbbbbb", "#ff0000"),
# cols <- c(1,2))
abline(v = 1.4, col = "blue", lw = 1)
abline(v = -3, col = "blue", lw = 1)
abline(h = -2, col = "blue", lw = 1)
abline(h = 3.9, col = "blue", lw = 1)
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2],
cex = 0.75)
# col = c("#bbbbbb", "#ff0000"),
# cols <- c(1,2))
abline(v = 1.3, col = "blue", lw = 1)
abline(v = -3, col = "blue", lw = 1)
abline(h = -2, col = "blue", lw = 1)
abline(h = 3.9, col = "blue", lw = 1)
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2],
cex = 0.75)
# col = c("#bbbbbb", "#ff0000"),
# cols <- c(1,2))
abline(v = 1.3, col = "blue", lw = 1)
abline(v = -2.7, col = "blue", lw = 1)
abline(h = -2, col = "blue", lw = 1)
abline(h = 3.9, col = "blue", lw = 1)
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2],
cex = 0.75)
# col = c("#bbbbbb", "#ff0000"),
# cols <- c(1,2))
abline(v = 1.3, col = "blue", lw = 1)
abline(v = -2.7, col = "blue", lw = 1)
abline(h = -2, col = "blue", lw = 1)
abline(h = 3.7, col = "blue", lw = 1)
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2],
cex = 0.75)
# col = c("#bbbbbb", "#ff0000"),
# cols <- c(1,2))
abline(v = 1.3, col = "blue", lw = 1)
abline(v = -2.7, col = "blue", lw = 1)
abline(h = -2, col = "blue", lw = 1)
abline(h = 3.6, col = "blue", lw = 1)
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2],
cex = 0.5)
# col = c("#bbbbbb", "#ff0000"),
# cols <- c(1,2))
abline(v = 1.3, col = "blue", lw = 1)
abline(v = -2.7, col = "blue", lw = 1)
abline(h = -2, col = "blue", lw = 1)
abline(h = 3.6, col = "blue", lw = 1)
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2],
xlab = "PC2",
ylab = "PC1",
cex = 0.5)
# col = c("#bbbbbb", "#ff0000"),
# cols <- c(1,2))
abline(v = 1.3, col = "blue", lw = 1)
abline(v = -2.7, col = "blue", lw = 1)
abline(h = -2, col = "blue", lw = 1)
abline(h = 3.6, col = "blue", lw = 1)
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2],
main = "Boundary (Outlier) Determination of PC1 Vs PC2",
xlab = "PC2",
ylab = "PC1",
cex = 0.5)
# col = c("#bbbbbb", "#ff0000"),
# cols <- c(1,2))
abline(v = 1.3, col = "blue", lw = 1)
abline(v = -2.7, col = "blue", lw = 1)
abline(h = -2, col = "blue", lw = 1)
abline(h = 3.6, col = "blue", lw = 1)
### Historgrams of PC1 & PC2
par(mfrow = c(1, 2))
hist(c_m_20_PCA$x[, 1],
main = "1st Principal Component",
xlab = "1st PC",
ylim = c(0, 1000))
hist(c_m_20_PCA$x[, 2],
main = "2nd Principal Component",
xlab = "2nd PC",
ylim = c(0, 1000))
outliers_PC1 <- which((c_m_20_PCA$x[, 1] > 1.3) | (c_m_20_PCA$x[, 1] < -2.7))
length(outliers_PC1)
outliers_PC2 <- which((c_m_20_PCA$x[, 2] > 3.6) | (c_m_20_PCA$x[, 2] < -2))
length(outliers_PC2)
total_pca_1_2_outliers <- union(outliers_PC1, outliers_PC2)
total_pca_1_2_outliers <- sort(total_pca_1_2_outliers)
length(mgb_pca_outliers)
mgb_pca_outliers
outliers_PC1 <- which((c_m_20_PCA$x[, 1] > 1.3) | (c_m_20_PCA$x[, 1] < -2.7))
length(outliers_PC1)
outliers_PC1
outliers_PC2 <- which((c_m_20_PCA$x[, 2] > 3.6) | (c_m_20_PCA$x[, 2] < -2))
length(outliers_PC2)
outliers_PC2
total_pca_1_2_outliers <- union(outliers_PC1, outliers_PC2)
total_pca_1_2_outliers <- sort(total_pca_1_2_outliers)
length(mgb_pca_outliers)
total_pca_1_2_outliers <- union(outliers_PC1, outliers_PC2)
total_pca_1_2_outliers <- sort(total_pca_1_2_outliers)
length(total_pca_1_2_outliers)
total_pca_1_2_outliers
is.numeric(mgb_pca_outliers)
is.vector(mgb_pca_outliers)
is.data.frame(mgb_pca_outliers)
df.positives <- as.data.frame(mgb_pca_outliers)
is.data.frame(df.positives)
knitr::include_graphics("./Biplot1.best.annotated.png")
plot(x = c_m_20_PCA$x[, 1],
y = c_m_20_PCA$x[, 2],
main = "Boundary (Outlier) Determination of PC1 Vs PC2",
xlab = "PC2",
ylab = "PC1",
cex = 0.5)
# col = c("#bbbbbb", "#ff0000"),
# cols <- c(1,2))
abline(v = 3, col = "blue", lw = 1)
abline(v = -3, col = "blue", lw = 1)
abline(h = -3, col = "blue", lw = 1)
abline(h = 3, col = "blue", lw = 1)
outliers_PC1 <- which((c_m_20_PCA$x[, 1] > 3) | (c_m_20_PCA$x[, 1] < -3))
length(outliers_PC1)
outliers_PC1
outliers_PC2 <- which((c_m_20_PCA$x[, 2] > 3) | (c_m_20_PCA$x[, 2] < -3))
length(outliers_PC2)
outliers_PC2
total_pca_1_2_outliers <- union(outliers_PC1, outliers_PC2)
total_pca_1_2_outliers <- sort(total_pca_1_2_outliers)
length(total_pca_1_2_outliers)
total_pca_1_2_outliers
plot(cumsum(c_m_20_PCA$sdev^2 / sum(c_m_20_PCA$sdev^2)),
main = "Cumulative Proportion of Variance Vs Principle Component",
sub = "(Red line indicates p = 0.9, Green line indicates PC=12)",
ylab = "% Variance(i) / Total Variance",
xlab = "Principal Component(i)",
ylim = c(0,1),
type="b")
abline(h = 0.9, col = "red")
abline(v = 12, col = "green")
plot(cumsum(c_m_20_PCA$sdev^2 / sum(c_m_20_PCA$sdev^2)),
main = "Cumulative Proportion of Variance Vs Principle Component",
sub = "(Red line indicates p = 0.9, Green line indicates PC=12)",
ylab = "% Variance(i) / Total Variance",
xlab = "PC(i)",
ylim = c(0,1),
type="b")
abline(h = 0.9, col = "red")
abline(v = 12, col = "green")
plot(cumsum(c_m_20_PCA$sdev^2 / sum(c_m_20_PCA$sdev^2)),
main = "Cumulative Proportion of Variance Vs Principle Component",
sub = "(Red line indicates p = 0.9, Green line indicates PC = 12)",
ylab = "% Variance(i) / Total Variance",
xlab = "PC(i)",
ylim = c(0,1),
type="b")
abline(h = 0.9, col = "red")
abline(v = 12, col = "green")
screeplot(c_m_20_PCA,
main = "Screeplot of c_m_20_PCA",
sub = "(Red Line Indicates Kaiser Rule, Eigenvalues = 1)",
npcs = 20,
type = "lines",
ylim = c(0, 7))
abline(h = 1, col = "red")
abline(v = 5, col = "green")
screeplot(c_m_20_PCA,
main = "Screeplot of c_m_20_PCA",
sub = "(Red Line Indicates Kaiser Rule, Eigenvalues = 1)",
xlab = "PC(i)",
npcs = 20,
type = "lines",
ylim = c(0, 7))
screeplot(c_m_20_PCA,
main = "Screeplot of c_m_20_PCA",
sub = "(Red Line Indicates Kaiser Rule, Eigenvalues = 1)",
npcs = 20,
type = "lines",
ylim = c(0, 7))
abline(h = 1, col = "red")
abline(v = 5, col = "green")
screeplot(c_m_20_PCA,
main = "Screeplot of c_m_20_PCA",
sub = "PC(i) \n(Red Line Indicates Kaiser Rule, Eigenvalues = 1)",
npcs = 20,
type = "lines",
ylim = c(0, 7))
abline(h = 1, col = "red")
abline(v = 5, col = "green")
screeplot(c_m_20_PCA,
main = "Screeplot of c_m_20_PCA",
sub = "PC(i)\n(Red Line Indicates Kaiser Rule, Eigenvalues = 1)",
npcs = 20,
type = "lines",
ylim = c(0, 7))
abline(h = 1, col = "red")
abline(v = 5, col = "green")
outliers_only <- c_m_20_PCA[total_pca_1_2_outliers]
plot(x = outliers_only$x[, 1],
y = outliers_only$x[, 2],
main = "Boundary (Outlier) Determination of PC1 Vs PC2",
xlab = "PC2",
ylab = "PC1")
head(outliers_only)
outliers_only <- c_m_20_PCA$x[total_pca_1_2_outliers]
head(outliers_only)
outliers_only <- c_m_20_PCA$x[total_pca_1_2_outliers]
head(outliers_only)
plot(x = outliers_only$x[, 1],
y = outliers_only$x[, 2],
main = "Boundary (Outlier) Determination of PC1 Vs PC2",
xlab = "PC2",
ylab = "PC1")
